//===-- STM8ISelDAGToDAG.cpp - A dag to dag inst selector for STM8 ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the STM8 target.
//
//===----------------------------------------------------------------------===//

#include "STM8.h"
#include "STM8TargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetLowering.h"
using namespace llvm;

/// STM8DAGToDAGISel - STM8 specific code to select STM8 machine
/// instructions for SelectionDAG operations.
///
namespace {
  class STM8DAGToDAGISel : public SelectionDAGISel {
  public:
    STM8DAGToDAGISel(STM8TargetMachine &TM, CodeGenOpt::Level OptLevel)
        : SelectionDAGISel(TM, OptLevel) {}

    StringRef getPassName() const override {
      return "STM8 DAG->DAG Pattern Instruction Selection";
    }

    // Include the pieces autogenerated from the target description.
  #include "STM8GenDAGISel.inc"

private:
    void Select(SDNode *N);
    bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Disp);
  };
}

void STM8DAGToDAGISel::Select(SDNode *N) {
  if (N->isMachineOpcode())
    return;
  SelectCode(N);
}


/// SelectAddr - returns true if it is able pattern match an addressing mode.
/// It returns the operands which make up the maximal addressing mode it can
/// match by reference.
bool STM8DAGToDAGISel::SelectAddr(SDValue N,
                                  SDValue &Base, SDValue &Disp) {
  if (N.getOpcode() != ISD::FrameIndex)
    return false;
  int FI = cast<FrameIndexSDNode>(N)->getIndex();
//  Base = CurDAG->getTargetFrameIndex(FI, TLI->getPointerTy());
  Disp = CurDAG->getTargetConstant(0, SDLoc(N), MVT::i16);
  return true;
}

/// createSTM8ISelDag - This pass converts a legalized DAG into a
/// STM8-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createSTM8ISelDag(STM8TargetMachine &TM,
                                        CodeGenOpt::Level OptLevel) {
  return new STM8DAGToDAGISel(TM, OptLevel);
}
